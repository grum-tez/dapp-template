archetype tidemark_fa2(contract_owner : address, permits : address, minter : address) with metadata ""

/* OWNERSHIP TRANSFER ------------------------------------------------------- */

variable owner_candidate : option<address> = none
variable null_address: address = KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT

entry declare_ownership(candidate : address) {
  no transfer
  called by contract_owner
  effect {
    owner_candidate := some(candidate);
  }
}

entry claim_ownership() {
  no transfer
  require {
    ownership_r1: (owner_candidate ? the = caller : false) otherwise "INVALID_CALLER"
  }
  effect {
    contract_owner := caller;
    owner_candidate := none
  }
}

/*  PAUSABLE ----------------------------------------------------------------- */

variable paused : bool = false

function is_not_paused() : bool {
  do_fail_if(paused, "CONTRACT_PAUSED");
  return true
}

entry pause() {
  no transfer
  called by contract_owner
  require {
    pausable_r1: is_not_paused()
  }
  effect {
    paused := true
  }
}

entry unpause() {
  no transfer
  called by contract_owner
  require {
    pausable_r2: paused otherwise "CONTRACT_NOT_PAUSED"
  }
  effect {
    paused := false
  }
}

/* METADATA ---------------------------------------------------------------- */

entry set_metadata(k: string, d : option<bytes>) {
  no transfer
  called by contract_owner
  require { md_r1 : is_not_paused() }
  effect {
    metadata.update(k, d)
  }
}

/* TOKEN METADATA ------------------------------------------------------------ */

asset token_metadata to big_map {
  ftoken_metadata : nat;
  token_id        : nat;
  token_info      : map<string, bytes>;
}

entry set_token_metadata (tid : nat, tdata: map<string, bytes>) {
  no transfer
  called by contract_owner
  require { tmd_r1: is_not_paused() }
  effect {
    token_metadata.add_update(tid, { token_id = tid; token_info = tdata });
  }
}

/* PERMITS ----------------------------------------------------------------- */

entry set_permits(p : address) {
  no transfer
  called by contract_owner
  require { p_r1 : is_not_paused() }
  effect {
    permits := p
  }
}

/* ERRORS ----------------------------------------------------------------- */

constant FA2_INSUFFICIENT_BALANCE : string = "FA2_INSUFFICIENT_BALANCE"
constant FA2_INVALID_AMOUNT       : string = "FA2_INVALID_AMOUNT"
constant FA2_NOT_OPERATOR         : string = "FA2_NOT_OPERATOR"
constant FA2_NOT_OWNER            : string = "FA2_NOT_OWNER"
constant FA2_TOKEN_UNDEFINED      : string = "FA2_TOKEN_UNDEFINED"
constant SIGNER_NOT_FROM          : string = "SIGNER_NOT_FROM"

/* PARAMETERS ------------------------------------------------------------- */

record transfer_destination {
  to_dest           : address;
  token_id_dest     : nat;
  token_amount_dest : nat
} as ((%to_, (token_id, amount)))

record transfer_param {
  tp_from : address;
  tp_txs  : list<transfer_destination>;
} as ((%from_, %txs))

/* STORAGE ---------------------------------------------------------------- */

enum sale_cycle_state =
| tidemark_auction
| english_auction
| grace_period
| unclaimed

variable tidemark : tez = 0tz

asset bid_asset identified by bid_id {
  bid_id: string;
  bid_number: nat;
  bid: tez;
  bidder: address;
  marketplace: address;
}

asset ledger identified by l_token_id to big_map {
  l_token_id   : nat;
  l_token_creator : address;
  l_token_owner     : address;
  l_token_balance : tez = 0tz;
  l_tidemark: tez = 0tz;
  l_creator_rate: rational;
  l_marketplace_rate: rational;
  l_minter_rate: rational;
  l_sale_cycle_state: sale_cycle_state = tidemark_auction;
  l_tidemark_duration: duration = 1w;
  l_grace_period_duration: duration = 1d;
  l_bid_count: nat = 0;
  l_bids: partition<bid_asset>;
}

record oh_record {
  ohr_date_purchased: date;
  ohr_owner: address;
  ohr_purchase_price: tez;
  ohr_time_held: duration;
  ohr_burden_paid: tez;
  ohr_is_contract: bool;
  ohr_is_creator: bool;
}

asset ownership_history {
  oh_asset_id: nat;
  oh_token_id: nat;
  oh_owner_number: nat;
  oh_oh_records: map<nat, oh_record>
}

asset operator identified by oaddr otoken oowner to big_map {
  oaddr       : address;
  otoken      : nat;
  oowner      : address;
}

asset operator_for_all identified by fa_oaddr fa_oowner to big_map {
  fa_oaddr    : address;
  fa_oowner   : address;
}

/* FUNCTIONS --------------------------------------------------------------- */

function get_from(txs : list<transfer_param>) : option<address> {
  match txs with
  | hd::tl -> begin
    const %from = hd.tp_from;
    for tx in tl do
      do_require(%from = tx.tp_from, FA2_NOT_OPERATOR)
    done;
    return some(%from)
  end
  | [] -> return none
  end
}

function check_operator(txs : list<transfer_param>) : bool {
  var res = true;
  for tx in txs do
    const %from = tx.tp_from;
    const tds = tx.tp_txs;
    for td in tds do begin
      res &=
        if caller <> %from then
          (operator.contains((caller, td.token_id_dest, %from)) or
           operator_for_all.contains((caller, %from)))
        else
          true;
    end
    done
  done;
  return res
}

/* ENTRYPOINTS ------------------------------------------------------------- */

record operator_param {
  opp_owner    : address;
  opp_operator : address;
  opp_token_id : nat
} as ((contract_owner, (operator, token_id)))

enum update_op =
| add_operator<operator_param>
| remove_operator<operator_param>

entry update_operators (upl : list<update_op>) {
  no transfer
  require { fa2_r1 : is_not_paused() }
  effect {
    for up in upl do
      match up with
      | add_operator(param) -> (* add *)
        do_require(param.opp_owner = caller , FA2_NOT_OWNER);
        operator.put({param.opp_operator; param.opp_token_id; param.opp_owner})
      | remove_operator(param) -> (* remove *)
        do_require(param.opp_owner = caller , FA2_NOT_OWNER);
        operator.remove((param.opp_operator, param.opp_token_id, param.opp_owner))
      end;
    done;
  }
}

enum update_for_all_op =
| add_for_all<address>
| remove_for_all<address>

entry update_operators_for_all (upl : list<update_for_all_op>) {
  no transfer
  require { fa2_r2 : is_not_paused() }
  effect {
    for up in upl do
      match up with
      | add_for_all(op) ->
          operator_for_all.put({ op; caller })
      | remove_for_all(op) ->
          operator_for_all.remove((op, caller))
      end;
    done;
  }
}

entry do_transfer(txs : list<transfer_param>) {
  no transfer
  called by self_address
  effect {
    for tx in txs do
      const %from = tx.tp_from;
      const tds   = tx.tp_txs;
      for td in tds do begin
        const tokenid = td.token_id_dest;
        const towner ?= ledger[tokenid]?.l_token_owner : FA2_TOKEN_UNDEFINED;
        if td.token_amount_dest > 0
        then begin
          do_require(towner = %from and td.token_amount_dest = 1, FA2_INSUFFICIENT_BALANCE);
          ledger.update(tokenid, { l_token_owner = td.to_dest })
        end
      end done
    done
  }
}

record gasless_param {
  transfer_params : list<transfer_param>;
  user_pk         : key;
  user_sig        : signature
}

function check_owner(addr : address, txs : list<transfer_param>) : bool {
  var res = true;
  for tx in txs do
    res &= addr = tx.tp_from
  done;
  return res
}

entry transfer_gasless (batch : list<gasless_param>) {
  no transfer
  require { fa2_r3 : is_not_paused() }
  effect {
    for b in batch do
      const txs = b.transfer_params;
      const pk  = b.user_pk;
      const sig = b.user_sig;
      const pkh_signer = key_to_address(pk);
      do_require(check_owner(pkh_signer, txs), SIGNER_NOT_FROM);
      transfer 0tz to permits
        call check<key * signature * bytes>((pk, sig, blake2b(pack(txs))));
      transfer 0tz to entry self.do_transfer(txs);
    done
  }
}

entry %transfer (txs : list<transfer_param>) {
  no transfer
  require { fa2_r4 : is_not_paused() }
  effect {
    if not check_operator(txs) then begin
      match get_from(txs) with
      | some(%from) ->
        transfer 0tz to permits
          call consume<address * bytes * string>((%from, blake2b(pack(txs)), FA2_NOT_OPERATOR))
      | none -> ()
      end
    end;

    transfer 0tz to entry self.do_transfer(txs);
  }
}
variable next_token_id : nat = 1

// function make_bid_id(ntd: nat) : string {
//   return (nat_to_string(ntd) + "/0")
  //  + nat_to_string(token_identifier) + "/b" + nat_to_string(bid_identifier))
// }



function make_bid_id(ntid: nat, bn: nat) : string {
  return ("t" + nat_to_string(ntid) + "|b" + nat_to_string(bn))
}


entry mint (
  tmd: map<string, bytes>,
  creator_rate : rational,
  marketplace_rate : rational,
  minter_rate : rational
  //add tidemark duration
  //add grace period
  ) {
  no transfer
  called by contract_owner
  require { fa2_r5: is_not_paused() }
  effect {
    // const bid_init_id_string: string = nat_to_string(next_token_id) + "/0";
    const bid_init_id_string = make_bid_id(next_token_id, 0);


    ledger.add({ 
      l_token_id = next_token_id; 
      l_token_owner = caller;
      l_creator_rate = creator_rate; 
      l_marketplace_rate = marketplace_rate;
      l_minter_rate = minter_rate;
      l_token_creator = caller;
      l_bids = [{bid_init_id_string; 0; 0tz; contract_owner; contract_owner}]
      });
    



    token_metadata.add_update(next_token_id, {
      token_id   = next_token_id;
      token_info = tmd
        });

    const oh_record_init : oh_record = {
      ohr_date_purchased = now;
      ohr_owner = caller;
      ohr_purchase_price = 0tz;
      ohr_time_held = 0s;
      ohr_burden_paid = 0tz;
      ohr_is_contract = isAddressContract(caller);
      ohr_is_creator = true

    };

    ownership_history.add({
      oh_asset_id = next_token_id;
      oh_token_id = next_token_id;
      oh_owner_number = 0;
      oh_oh_records = [(0, oh_record_init)]
      });

    //     });
    next_token_id := next_token_id + 1
  }
}

entry burn(tid : nat) {
  no transfer
  constant {
    token_owner ?is ledger[tid]?.l_token_owner otherwise FA2_TOKEN_UNDEFINED;
  }
  require {
    fa2_r6: is_not_paused();
    fa2_r7: token_owner = caller otherwise FA2_NOT_OWNER
  }
  effect {
    ledger.remove(tid);
    token_metadata.remove(tid);
  }
}
 
entry make_offer(
  mo_token_id : nat,
  mo_marketplace: address,
  mo_bid: tez,
  ) {
    require { 
      tm_r1: mo_bid = transferred otherwise "bid did not equal transferred";
      tm_r2: mo_bid > 0tz otherwise "bid must be greater than 0";
      tm_r3: ledger[mo_token_id].l_token_owner <> caller otherwise "cannot make offer on your own token";
     // tm_r4: Auction must not have concluded
     // tm_r5: mo_marketplace must hold a marketplace token
       tm_r6: is_not_paused();
     } 

     effect {
      const token_ledger ?= ledger[mo_token_id];
      const last_bid_number = ledger[mo_token_id].l_bid_count;
      const last_bid_asset_id = make_bid_id(mo_token_id, last_bid_number);
      const last_bid_asset_value ?= bid_asset[last_bid_asset_id];

      const last_bid = last_bid_asset_value.bid;
      const last_bidder = last_bid_asset_value.bidder;
      const creator_rate = ledger[mo_token_id].l_creator_rate;
      const minter_rate = ledger[mo_token_id].l_minter_rate;

      do_require(mo_bid > last_bid, "incoming bid must be greater than current bid");
      
    //track the token balance locally...
     var mo_token_balance_tracker = ledger[mo_token_id].l_token_balance;
      mo_token_balance_tracker += mo_bid;


      //If there was a past bid...
      if last_bid > 0tz then begin
        //...pay back the last bidder...
        transfer last_bid to last_bidder;
        //...and update the token balance locally.
        mo_token_balance_tracker -= last_bid;
      end;

    //if the tidemark has been passed, then update the tidemark...
    if (transferred > tidemark) then begin
      tidemark := transferred;
      const increase = mo_bid - last_bid;
      const creator_fee = creator_rate * increase;
      const minter_fee = minter_rate * increase;
      //...and pay the creator and minter their fees.
      transfer creator_fee to ledger[mo_token_id].l_token_creator;
      mo_token_balance_tracker -= creator_fee;
      transfer minter_fee to minter;
      mo_token_balance_tracker -= minter_fee;
    end;

    //update the bid number locally
    const new_bid_number: nat = last_bid_number + 1;
    //update the bid number in storage
    ledger[mo_token_id].l_bid_count := new_bid_number;
    // Create local variable for current bid record


    // Add current bid to bid history
    // TODO need a function for deleting bid records when they exceed a certain number, eg 20.

    const new_bid_id = make_bid_id(mo_token_id, new_bid_number);
    ledger[mo_token_id].l_bids.add({
      bid_id = new_bid_id;
      bid_number = new_bid_number;
      bid = mo_bid;
      bidder = caller;
      marketplace = mo_marketplace
});
    
    //update the token balance in storage
    ledger[mo_token_id].l_token_balance := mo_token_balance_tracker;
     }
  }


entry sell(s_token_id : nat) {
  effect {
      const token_ledger ?= ledger[s_token_id];
      const winning_bid_number = token_ledger.l_bid_count;
      const last_bid_asset_id = make_bid_id(s_token_id, winning_bid_number);
      const last_bid_asset_value ?= bid_asset[last_bid_asset_id];
      const winning_bid = last_bid_asset_value.bid;
      const winning_bidder = last_bid_asset_value.bidder;
      const marketplace_rate = ledger[s_token_id].l_marketplace_rate;
      const marketplace_fee = marketplace_rate * winning_bid;
      const token_creator = ledger[s_token_id].l_token_creator;
      const token_owner = ledger[s_token_id].l_token_owner;

      //REQUIREMENTS:
      do_require(winning_bid_number > 0, "no bids have been made on this token");
      do_require(caller = token_owner or caller = self_address, "only owner or the contract itself may call the sell entrypoint");


      //track the token balance locally...
      var s_token_balance_tracker = ledger[s_token_id].l_token_balance; 

      // Get asset view of the bids above 0:
      const bids_above_zero = ledger[s_token_id].l_bids.select(the.bid > 0tz);
     

      // Calculate what each marketplace is due
      // TODO: Update this to use exponential split with global constant
      const splitMap: map<nat, tez> = evenSplit(marketplace_fee, bids_above_zero);

      // Pay each marketplace their share
      for b in bids_above_zero do
        // The first bid is a dummy bid with a bid of 0 and a marketplace of null_address.
        // Attempt to pay to this address will fail with an ENTRY_NOT_FOUND error, so we skip it.
        const this_bid_number = bid_asset[b].bid_number;
        const this_marketplace = bid_asset[b].marketplace;
        const split ?= splitMap[this_bid_number] : "DEV_ERR: const split ?= splitMap[n]";
        transfer split to this_marketplace;
        s_token_balance_tracker -= split;
      done;
      // // reset bid_history
      // bid_history.put({
      //  bh_asset_id = s_token_id;
      //  bh_token_id = s_token_id;
      //  bh_bid_number = 0;
      // bh_bid_records = [(0, bid_record_init)]
      //   });

      // // Pay a fair share of royalties back to previous owners of the contract
      // // calculate amount due:

   
      // //Pay seller
      // ledger[s_token_id].l_token_owner := winning_bidder;
      // //Transfer Ownership
      // transfer s_token_balance_tracker to token_owner;
      // //Update token balance locally and in storage
      // s_token_balance_tracker := 0tz;
      // ledger[s_token_id].l_token_balance := s_token_balance_tracker;
      
 
      // //Get ownership history local variables
      // const token_oh_asset ?= ownership_history[s_token_id];
      // const owner_number_before_sale = token_oh_asset.oh_owner_number;
      // const token_oh_records = token_oh_asset.oh_oh_records;
      // const previous_owner_record ?= token_oh_records[owner_number_before_sale];
      
      // //update number of owners on token ownership history asset

      // const owner_number_after_sale = owner_number_before_sale + 1;
      // ownership_history.update(s_token_id,{
      //   oh_owner_number = owner_number_after_sale
      // });
      
      // //update time held for previous owner in their ownership history record

      // //Get date of purchase for previous owner
      // const dop_previous_owner = previous_owner_record.ohr_date_purchased;
      // const time_held_previous_owner = now - dop_previous_owner;
      // // ownership_history[s_token_id].oh_oh_records.update( owner_number_before_sale, some({
      // // ohr_date_purchased = ohr_date_purchase;
      // // ohr_owner = ohr_owner;
      // // ohr_purchase_price = ohr_purchase_price;
      // // ohr_burden_paid = ohr_burden_paid;
      // // ohr_is_contract = ohr_is_contract;
      // // ohr_is_creator = ohr_is_creator;
      // // ohr_time_held = time_held_previous_owner
      // // }));
  

      // //add new owner to ownership_history
      // ownership_history[s_token_id].oh_oh_records.put( owner_number_after_sale, {
      //   ohr_date_purchased = now;
      //   ohr_owner = winning_bidder;
      //   ohr_purchase_price = winning_bid;
      //   ohr_time_held = 0s;
      //   ohr_burden_paid = 0tz;
      //   ohr_is_contract = isAddressContract(winning_bidder);
      //   ohr_is_creator = (winning_bidder = token_creator)
      // });
    }
}


// This evenSplit function needs to be replaced with the exponential split
function evenSplit(feeToSplit: tez, bidView : asset_view<bid_asset> ) : map<nat, tez> {
  var splitMap : map<nat, tez> = [];
  const bids_length = bidView.count();
  const bid_divisor ?= int_to_nat(bids_length - 1);
  for b in bidView do
    const tezDue : tez = feeToSplit div bid_divisor;
    splitMap.update(bid_asset[b].bid_number, some(tezDue));
  done;
  return splitMap
}


//CURRENTLY HARD CODED - ALWAYS RETURNS FALSE
function isAddressContract(ad: address) : bool {
  return false
}



/* GETTERS ----------------------------------------------------------------- */

record balance_of_request {
  bo_owner : address;
  btoken_id : nat;
} as ((owner, token_id))

record balance_of_response {
  request : balance_of_request;
  balance_ : nat;
} as ((request, balance))
 
function get_balance(br : balance_of_request) : nat {
  const token ?= ledger[br.btoken_id] : FA2_TOKEN_UNDEFINED;
  return (token.l_token_owner = br.bo_owner ? 1 : 0)
}

getter balance_of (requests : list<balance_of_request>) : list<balance_of_response> {
  return map(requests, br -> {
    request = br;
    balance_ = get_balance(br)
  })
}

/* VIEWS ------------------------------------------------------------------- */


/* TZIP-017 One-step  ------------------------------------------------------ */

entry permit_transfer (txs : list<transfer_param>, permit : option<key * signature>) {
  no transfer
  require { fa2_r9 : is_not_paused() }
  effect {
    match permit with
    | some(p) -> begin
        const pk = p[0];
        const sig = p[1];
        const pkh_signer = key_to_address(pk);
        do_require(check_owner(pkh_signer, txs), SIGNER_NOT_FROM);
        transfer 0tz to permits
            call check<key * signature * bytes>((pk, sig, blake2b(pack(txs))));
        transfer 0tz to entry self.do_transfer(txs);
    end
    | none -> begin
      if not check_operator(txs) then begin
        match get_from(txs) with
        | some(%from) ->
          transfer 0tz to permits
            call consume<address * bytes * string>((%from, blake2b(pack(txs)), FA2_NOT_OPERATOR))
        | none -> ()
        end
      end;

      transfer 0tz to entry self.do_transfer(txs);
    end
    end
  }
}